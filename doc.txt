Java Model
@Data
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "evraklar")
public class Document {

    @Id
    @Column(name = "evrakId")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    Long id;
    @Column(name = "tur")
    String type;
    @Column(name = "grup")
    String group;
    @ManyToOne
    @JoinColumn(name = "proje")
    Project project;
    @Column(name = "tarih")
    Date documentDate;
    @Column(name = "sayi")
    String number;
    @Column(name = "konu")
    String subject;
    @Column(name = "yetkiDuzeyi")
    Long authorizationLevel;
    @Column(name = "kayitTarih")
    Date recordDate;
    @ManyToOne
    @JoinColumn(name = "kaydeden")
    User recordBy;
    @Column(name = "arsiv")
    Boolean archive;
    @Column(name = "evrakAdres")
    String documentAddress;
    @ManyToOne()
    @JoinColumn(name = "bagli")
    Document connected;
    @ManyToOne
    @JoinColumn(name = "sahip")
    User owner;
    @Column(name = "ocr")
    String ocr;

}
Java Repository
@Repository
public interface DocumentRepository extends JpaRepository<Document, Long> {


    @Query("Select a FROM Document a WHERE (a.number ilike %:number% and a.subject ilike %:subject% and a.ocr ilike %:word% and a.type ilike %:type% and a.group ilike %:group%) and a.archive= :archive order by a.recordDate desc")
    List<Document> find(@Param("number") String number, @Param("subject") String subject, @Param("word") String word, @Param("type") String type, @Param("group") String group, @Param("archive") Boolean archive);

    @Query("Select a FROM Document a WHERE (a.number ilike %:number% and a.subject ilike %:subject% and a.ocr ilike %:word% and a.type ilike %:type% and a.group ilike %:group%) and a.archive= :archive and a.project.id = :projectId and a.documentDate >= :dateBegin and a.documentDate <= :dateEnd  order by a.recordDate desc" )
    List<Document> findProjectAndDate(@Param("number") String number, @Param("subject") String subject, @Param("word") String word, @Param("type") String type, @Param("group") String group, @Param("archive") Boolean archive, @Param("projectId") Long projectId, @Param("dateBegin") Date dateBegin, @Param("dateEnd") Date dateEnd);

    @Query("Select a FROM Document a WHERE (a.number ilike %:number% and a.subject ilike %:subject% and a.ocr ilike %:word% and a.type ilike %:type% and a.group ilike %:group%) and a.archive= :archive and a.project.id = :projectId order by a.recordDate desc" )
    List<Document> findProject(@Param("number") String number, @Param("subject") String subject, @Param("word") String word, @Param("type") String type, @Param("group") String group, @Param("archive") Boolean archive, @Param("projectId") Long projectId);

    @Query("Select a FROM Document a WHERE (a.number ilike %:number% and a.subject ilike %:subject% and a.ocr ilike %:word% and a.type ilike %:type% and a.group ilike %:group%) and a.archive= :archive and a.documentDate >= :dateBegin and a.documentDate <= :dateEnd  order by a.recordDate desc" )
    List<Document> findDate(@Param("number") String number, @Param("subject") String subject, @Param("word") String word, @Param("type") String type, @Param("group") String group, @Param("archive") Boolean archive, @Param("dateBegin") Date dateBegin, @Param("dateEnd") Date dateEnd);

    @Query("Select a FROM Document a WHERE a.number ilike %:number% and a.subject ilike %:subject% and a.ocr ilike %:word% and a.type ilike %:type% and a.group ilike %:group% and a.archive= :archive order by a.recordDate desc")
    List<Document> findWord(@Param("number") String number, @Param("subject") String subject, @Param("word") String word, @Param("type") String type, @Param("group") String group, @Param("archive") Boolean archive);

    @Query("Select a FROM Document a WHERE a.project.id= :projectId and a.number= :number order by a.recordDate desc")
    Optional<Document> findByProjectAndNumber(@Param("projectId") Long projectId, @Param("number") String number);

    @Query("Select a FROM Document a WHERE a.project.archived = false and a.owner.id= :userId order by a.recordDate desc")
    List<Document> findByUser(@Param("userId") Long userId);

    @Query("Select a FROM Document a WHERE a.project.id= :projectId and a.owner= :userId order by a.recordDate desc")
    List<Document> findByUserAndProject(@Param("userId") Long userId, @Param("projectId") Long projectId);

    @Query("Select a FROM Document a WHERE a.project.id= :projectId order by a.recordDate desc")
    List<Document> findByProjectId(@Param("projectId") Long projectId);
}

Java Servis

public List<Document> documentSearch(DocumentSearchDto params) {
        Date currentDate = new Date(System.currentTimeMillis());
        Date dateBegin = currentDate;
        Date dateEnd = currentDate;
        long projectId = 0L;

        String number = params.getDocumentNumber().toUpperCase();
        String subject = params.getSubject().toUpperCase();
        String word = params.getSearchWord().toUpperCase();
        String type = params.getDocumentType().toUpperCase();
        String group = params.getDocumentGroup().toUpperCase();

        if (params.getProjectId() > 0) {
            projectId = params.getProjectId();
        }
        if (params.getBeginAt() != null) {
            dateBegin = params.getBeginAt();
        }
        if (params.getBeginAt() != null) {
            dateEnd = params.getEndAt();
        }
        Boolean archive = params.getArchive();

        if (projectId == 0 && dateBegin == currentDate && dateEnd == currentDate) {
            return repository.find(number, subject, word, type, group, archive);
        } else if (projectId > 0 && dateBegin != currentDate && dateEnd != currentDate) {
            return repository.findProjectAndDate(number, subject, word, type, group, archive, projectId, dateBegin, dateEnd);
        } else if (projectId > 0 && dateBegin == currentDate && dateEnd == currentDate) {
            return repository.findProject(number, subject, word, type, group, archive, projectId);
        } else if (projectId == 0 && dateBegin != currentDate && dateEnd != currentDate) {
            return repository.findDate(number, subject, word, type, group, archive, dateBegin, dateEnd);
        } else {
            return repository.findWord(number, subject, word, type, group, archive);
        }
    }

Java API

  @PostMapping(value = "/search/", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Document>> documentSearch(@RequestBody DocumentSearchDto params) {
        List<Document> documents = documentService.documentSearch(params);
        return new ResponseEntity<>(documents, HttpStatus.CREATED);
    }
